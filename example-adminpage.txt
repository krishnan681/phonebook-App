import React, { useState, useEffect, useContext } from "react";
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  ActivityIndicator,
  Image,
  TextInput,
} from "react-native";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import Icon from "react-native-vector-icons/Ionicons";
import { AuthContext } from "../AuthContext";

const Tab = createBottomTabNavigator();

// Main Dashboard Component
const DashboardMain = () => {
  const { user } = useContext(AuthContext);
  const [totals, setTotals] = useState({ totalRecords: 0, totalUniqueIds: 0 });
  const [latestEntries, setLatestEntries] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchTotals = async () => {
    try {
      const response = await fetch(
        "https://signpostphonebook.in/client_fetch.php"
      );
      if (!response.ok) throw new Error("Network response was not ok");
      const data = await response.json();

      if (Array.isArray(data)) {
        const totalRecords = data.length;
        const uniqueIds = new Set(data.map((item) => item.id)).size;
        setTotals({ totalRecords, totalUniqueIds: uniqueIds });
        setLatestEntries(data.slice(-10)); // Fetch last 10 entries
        setError(null);
      } else {
        throw new Error("Invalid data structure received");
      }
    } catch (err) {
      console.error("Error fetching totals:", err);
      setError("Failed to load totals.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTotals();
    const interval = setInterval(fetchTotals, 10000); // Refresh every 10 seconds
    return () => clearInterval(interval);
  }, []);

  if (loading) {
    return (
      <View style={styles.loaderContainer}>
        <ActivityIndicator size="large" color="#0000ff" />
        <Text>Loading...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <FlatList
      data={latestEntries}
      ListHeaderComponent={
        <>
          {/* Header Section */}
          <View style={styles.header}>
            <View>
              <Text style={styles.greeting}>
                Hi {user?.username || "Guest"}
              </Text>
              <Text style={styles.subGreeting}>
                Have you taken out the trash today?
              </Text>
            </View>
            <Image
              source={{
                uri: user?.profileImage || "https://via.placeholder.com/50",
              }}
              style={styles.profileImage}
            />
          </View>

          {/* Totals Section */}
          <View style={styles.sectionOne}>
            <View style={styles.DivOne}>
              <Icon name="document-text-outline" size={24} color="#4A90E2" />
              <Text style={{ fontSize: 20 }}>
                Total Records: {totals.totalRecords}
              </Text>
            </View>
            <View style={styles.DivTwo}>
              <Icon name="finger-print-outline" size={24} color="#50E3C2" />
              <Text style={{ fontSize: 20 }}>
                Total Unique IDs: {totals.totalUniqueIds}
              </Text>
            </View>
          </View>

          {/* Latest Entries Heading */}
          <Text style={styles.heading}>Last 10 Entries</Text>
        </>
      }
      keyExtractor={(item, index) => `${item.id}-${index}`}
      renderItem={({ item }) => (
        <View style={styles.entryItem}>
          <Text>ID: {item.id}</Text>
          <Text>Business Name: {item.businessname}</Text>
          <Text>City: {item.city}</Text>
          <Text>Product: {item.product}</Text>
        </View>
      )}
      contentContainerStyle={styles.container}
    />
  );
};

// DataTab Component with Search Functionality
const DataTab = () => {
  const [data, setData] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchData = async () => {
    try {
      const response = await fetch(
        "https://signpostphonebook.in/client_fetch.php"
      );
      if (!response.ok) throw new Error("Network response was not ok");
      const result = await response.json();

      if (Array.isArray(result)) {
        setData(result);
        setFilteredData(result);
        setError(null);
      } else {
        throw new Error("Invalid data structure received");
      }
    } catch (err) {
      console.error("Error fetching data:", err);
      setError("Failed to load data.");
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (query) => {
    setSearchQuery(query);
    if (query.trim() === "") {
      setFilteredData(data); // Reset to all data if search query is empty
    } else {
      const filtered = data.filter((entry) =>
        entry.businessname.toLowerCase().includes(query.toLowerCase()) ||
        entry.city.toLowerCase().includes(query.toLowerCase()) ||
        entry.product.toLowerCase().includes(query.toLowerCase())
      );
      setFilteredData(filtered);
    }
  };

  useEffect(() => {
    fetchData();
    const interval = setInterval(fetchData, 10000); // Refresh every 10 seconds
    return () => clearInterval(interval);
  }, []);

  if (loading) {
    return (
      <View style={styles.loaderContainer}>
        <ActivityIndicator size="large" color="#0000ff" />
        <Text>Loading...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* Search Section */}
      <TextInput
        style={styles.searchInput}
        placeholder="Search by business name, city, or product..."
        value={searchQuery}
        onChangeText={handleSearch}
      />
      <FlatList
        data={filteredData}
        keyExtractor={(item, index) => `${item.id}-${index}`}
        renderItem={({ item }) => (
          <View style={styles.entryItem2}>
            <View style={{ flex: 1 }}>
              <Text>ID: {item.id}</Text>
              <Text>Business Name: {item.businessname}</Text>
              <Text>City: {item.city}</Text>
              <Text>Product: {item.product}</Text>
            </View>
            <Icon
              name="chevron-forward-outline"
              size={24}
              color="#888"
              style={{ alignSelf: 'center' }}
            />
          </View>
        )}
      />
    </View>
  );
};

// Total Entries Component
const TotalEntries = () => {
  const [totalEntries, setTotalEntries] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchTotalEntries = async () => {
    try {
      const response = await fetch(
        "https://signpostphonebook.in/fetch_total_count.php"
      );
      if (!response.ok) throw new Error("Network response was not ok");
      const data = await response.json();

      if (Array.isArray(data)) {
        setTotalEntries(data);
      } else {
        throw new Error("Invalid data structure received");
      }
    } catch (err) {
      console.error("Error fetching total entries:", err);
      setError("Failed to load total entries.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTotalEntries();
    const interval = setInterval(fetchTotalEntries, 10000); // Refresh every 10 seconds
    return () => clearInterval(interval);
  }, []);

  if (loading) {
    return (
      <View style={styles.loaderContainer}>
        <ActivityIndicator size="large" color="#0000ff" />
        <Text>Loading...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <FlatList
      data={totalEntries}
      keyExtractor={(item, index) => `${item.id}-${index}`}
      renderItem={({ item }) => (
        <View style={styles.entryItem}>
          <Text>ID: {item.id}</Text>
          <Text>Name: {item.name}</Text>
          <Text>Date: {item.date}</Text>
          <Text>Count: {item.count}</Text>
        </View>
      )}
    />
  );
};

// Bottom Tab Navigator
const Dashboard = () => {
  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarIcon: ({ focused, color, size }) => {
          let iconName;

          if (route.name === "Main") {
            iconName = focused ? "home" : "home-outline";
          } else if (route.name === "Data") {
            iconName = focused ? "folder" : "folder-outline";
          } else if (route.name === "Total Entries") {
            iconName = focused ? "stats-chart" : "stats-chart-outline";
          }

          return <Icon name={iconName} size={size} color={color} />;
        },
        tabBarActiveTintColor: "tomato",
        tabBarInactiveTintColor: "gray",
      })}
    >
      <Tab.Screen name="Main" component={DashboardMain} />
      <Tab.Screen name="Data" component={DataTab} />
      <Tab.Screen name="Total Entries" component={TotalEntries} />
    </Tab.Navigator>
  );
};

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    padding: 20,
    backgroundColor: "#f5f5f5",
  },
  loaderContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  errorContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  errorText: {
    color: "red",
    fontSize: 16,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 50,
    height: 150,
    padding: 20,
    backgroundColor: "#EAF0F9",
  },
  greeting: {
    fontSize: 28,
    fontWeight: "bold",
  },
  subGreeting: {
    fontSize: 15,
    color: "#888",
  },
  profileImage: {
    width: 80,
    height: 80,
    borderRadius: 50,
    backgroundColor: "#ccc",
  },
  sectionOne: {
    marginBottom: 20,
  },
  DivOne: {
    flexDirection: "row",
    alignItems: "center",
    gap: 20,
    marginBottom: 20,
    padding: 20,
    backgroundColor: "#fff",
    borderRadius: 8,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  DivTwo: {
    flexDirection: "row",
    alignItems: "center",
    gap: 20,
    marginBottom: 20,
    padding: 20,
    backgroundColor: "#fff",
    borderRadius: 8,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  heading: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 10,
  },
  entryItem: {
    padding: 20,
    backgroundColor: "#fff",
    marginBottom: 10,
    borderRadius: 8,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  searchInput: {
    marginBottom: 20,
    padding: 10,
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    backgroundColor: "#fff",
  },
  entryItem2: {
    flexDirection: "row", // Added for icon placement
    alignItems: "center", // Ensures alignment of text and icon
    padding: 20,
    backgroundColor: "#fff",
    marginBottom: 10,
    borderRadius: 8,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
});

export default Dashboard;
