import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
} from "react-native";
import { RadioButton } from "react-native-paper";

const MediaPartner = ({ navigation }) => {
  const [mypromoCode, setPromoCode] = useState("");
  const [mybusinessname, setBusinessname] = useState("");
  const [myaddress, setAddress] = useState("");
  const [myperson, setPerson] = useState("");
  const [mycity, setCity] = useState("");
  const [mypincode, setPincode] = useState("");
  const [myproduct, setProduct] = useState("");
  const [mylandLine, setLandLine] = useState("");
  const [myLcode, setLcode] = useState("");
  const [myemail, setEmail] = useState("");
  const [myprefix, setPrefix] = useState("");
  const [mymobileno, setMobileno] = useState("");
  const [isRegistered, setIsRegistered] = useState(false);
  const [dateTime, setDateTime] = useState("");

  const updateDateTime = () => {
    const now = new Date();
    const formattedDate = now.toLocaleDateString();
    const formattedTime = now.toLocaleTimeString();
    setDateTime(`${formattedDate} ${formattedTime}`);
  };

  useEffect(() => {
    updateDateTime();
    const interval = setInterval(updateDateTime, 1000);
    return () => clearInterval(interval);
  }, []);

  const resetForm = () => {
    setBusinessname("");
    setMobileno("");
    setPrefix("");
    setAddress("");
    setPerson("");
    setPincode("");
    setCity("");
    setProduct("");
    setLandLine("");
    setLcode("");
    setEmail("");
    setPromoCode("");
  };

  const checkMobileNumber = async (mobile) => {
    try {
      const response = await fetch(
        "https://signpostphonebook.in/client_insert_data_for_new_database.php",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ mobileno: mobile }),
        }
      );
      const result = await response.json();
      if (result.registered) {
        setIsRegistered(true);
        Alert.alert("Mobile number is already registered.");
        setMobileno("");
      } else {
        setIsRegistered(false);
      }
    } catch (error) {
      Alert.alert("Error", "Unable to verify mobile number.");
    }
  };

 

  const insertRecord = async () => {
    if (!mymobileno) {
      Alert.alert("Error", "Please enter all required fields.");
      return;
    }
    if (isRegistered) {
      Alert.alert("Error", "Mobile number is already registered.");
      return;
    }

    const Data = {
      businessname: mybusinessname,
      prefix: "M/s.",
      person: myperson,
      personprefix: myprefix,
      address: myaddress,
      city: mycity,
      pincode: mypincode,
      mobileno: mymobileno,
      email: myemail,
      product: myproduct,
      landline: mylandLine,
      lcode: myLcode,
    };

    try {
      const response = await fetch(
        "https://signpostphonebook.in/client_insert_data_for_new_database.php",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(Data),
        }
      );
      const jsonResponse = await response.json();
      if (jsonResponse.Message) {
        Alert.alert("Success", "Data saved successfully.");
        resetForm();
      } else {
        Alert.alert("Error", "Unexpected response from server.");
      }
    } catch (error) {
      Alert.alert("Error", "Error saving data.");
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.heading}>Media Partner Registration</Text>
      <TextInput
        style={styles.input}
        placeholder="Mobile Number"
        keyboardType="numeric"
        value={mymobileno}
        onChangeText={setMobileno}
        onBlur={() => checkMobileNumber(mymobileno)}
      />
      <TextInput
        style={styles.input}
        placeholder="Business Name"
        value={mybusinessname}
        onChangeText={setBusinessname}
      />
      <TextInput
        style={styles.input}
        placeholder="Address"
        value={myaddress}
        onChangeText={setAddress}
      />
      <TouchableOpacity style={styles.button} onPress={insertRecord}>
        <Text style={styles.buttonText}>Submit</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: "#fff",
  },
  heading: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 10,
  },
  input: {
    borderWidth: 1,
    borderColor: "#ccc",
    padding: 10,
    marginBottom: 10,
    borderRadius: 5,
  },
  button: {
    backgroundColor: "blue",
    padding: 10,
    borderRadius: 5,
    alignItems: "center",
  },
  buttonText: {
    color: "white",
    fontSize: 16,
  },
});

export default MediaPartner;
































































copied from website code 

import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
} from "react-native";
import { RadioButton } from "react-native-paper";

const MediaPartner = ({ navigation }) => {
  const [mypromoCode, setPromoCode] = useState("");
  const [mybusinessname, setBusinessname] = useState("");
  const [myaddress, setAddress] = useState("");
  const [myperson, setPerson] = useState("");
  const [mycity, setCity] = useState("");
  const [mypincode, setPincode] = useState("");
  const [myproduct, setProduct] = useState("");
  const [mylandLine, setLandLine] = useState("");
  const [myLcode, setLcode] = useState("");
  const [myemail, setEmail] = useState("");
  const [myprefix, setPrefix] = useState("");
  const [mymobileno, setMobileno] = useState("");
  const [showMobiletext, setshowMobiletext] = useState(false);
  const [showbusinesstext, setShowBusinesstext] = useState(false);
  const [regName, setRegName] = useState("");
  const [regPrefix, setRegPrefix] = useState("");
  const [regBusinessName, setRegBusinessName] = useState("");
  const [regBusinessPrefix, setRegBusinessPrefix] = useState("");
  const [showPersonName, setShowPersonName] = useState(false);
  const [showprefixtext, setShowPrefixText] = useState(false);
  const [showAddressText, setshowAddressText] = useState(false);
  const [showCityText, setshowCityText] = useState(false);
  const [showPincodeText, setshowPincodeText] = useState(false);
  const [showProductText, setshowProductText] = useState(false);
  const [showLandlineText, setshowLandlineText] = useState(false);
  const [isRegistered, setIsRegistered] = useState(false);
  const [showStdText, setshowStdText] = useState(false);
  const [showEmailText, setshowEmailText] = useState(false);
  const [showPopup, setShowPopup] = useState(false);
  const [showPopup1, setShowPopup1] = useState(false);
  const mypriority = "0";
  const mydiscount = "10";
  const mydescription = "Update Soon";
  const cmpanyPrefix = "M/s.";

  const smsBody = encodeURIComponent(
    `Dear sir, \n Signpost PHONE BOOK,  is a portal for  Mobile Number Finder and & Dialerwith Digital Marketing. Please kindly view and verify the correctness of details on your firm, at the earliest. \n URL :- www.signpostphonebook.in \n User name :-  your mobile number \n Password  :- Signpost \n You can use the PHONE BOOK for your business promotion in any desired (Pincode) area so Entire Coimbatore`
  );

  const [dateTime, setDateTime] = useState("");

  const updateDateTime = () => {
    const now = new Date();

    // Format date
    const options = { year: "numeric", month: "numeric", day: "numeric" };
    const formattedDate = now.toLocaleDateString(undefined, options);

    // Format time
    let hours = now.getHours();
    const minutes = now.getMinutes();
    const ampm = hours >= 12 ? "PM" : "AM";
    hours = hours % 12 || 12; // Convert to 12-hour format
    const formattedTime = `${hours}:${
      minutes < 10 ? "0" + minutes : minutes
    } ${ampm}`;

    // Combine date and time
    setDateTime(`${formattedDate} ${formattedTime}`);
  };

  useEffect(() => {
    updateDateTime();
    const interval = setInterval(updateDateTime, 1000); // Update every second
    return () => clearInterval(interval); // Cleanup interval on unmount
  }, []);
  const resetForm = () => {
    setBusinessname("");
    setMobileno("");
    setPrefix("");
    setAddress("");
    setPerson("");
    setPincode("");
    setCity("");
    setProduct("");
    setLandLine("");
    setLandLine("");
    setLcode("");
    setEmail("");
    setPromoCode("");
  };

  const handleBusinessName = (e) => {
    const businessName = e.target.value;
    if (/^[a-zA-Z\s]*$/.test(businessName)) {
      setBusinessname(businessName);
    }
  };
  const handlePersonName = (e) => {
    const personName = e.target.value;
    if (/^[a-zA-Z\s]*$/.test(personName)) {
      setPerson(personName);
    }
  };
  const handlePopup = (e) => {
    e.preventDefault();
    setShowPopup(false);
    const smsBody = encodeURIComponent(
      `Dear sir,  
Signpost PHONE BOOK,  is a portal for  Mobile Number Finder and & Dialer with Digital Marketing. Please kindly view and verify the correctness of details on your firm, at the earliest.

URL :- www.signpostphonebook.in
User name :-  Your mobile number 
Password  :- Signpost

You can use the PHONE BOOK for your business promotion in any desired (Pincode) area so Entire Coimbatore`
    );
    const smsLink = `sms:${mymobileno}?body=${smsBody}`;

    setTimeout(() => {
      window.location.href = smsLink;
    }, 2000);
    resetForm();
  };

  const handleClosePopup1 = (e) => {
    e.preventDefault();
    setShowPopup1(false);
  };
  const handleCityName = (e) => {
    const cityName = e.target.value;
    if (/^[a-zA-Z\s]*$/.test(cityName)) {
      setCity(cityName);
    }
  };



  const checkMobileNumber = async (mobile) => {
    try {
      const response = await fetch(
        "https://signpostphonebook.in/client_insert_data_for_new_database.php",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ mobileno: mobile }),
        }
      );
      const result = await response.json();
      if (result.registered) {
        setIsRegistered(true);
        Alert.alert("Mobile number is already registered.");
        setMobileno("");
      } else {
        setIsRegistered(false);
      }
    } catch (error) {
      Alert.alert("Error", "Unable to verify mobile number.");
    }
  };

  const insertCount = async () => {
    const dataCount = {
      name: userData.businessname || userData.person,
      userid: userData.id,
      date: new Date().toISOString().split("T")[0],
      count: 1, //Default count is 1 if mycount is not set
    };

    try {
      const response = await axios.post(
        "https://signpostphonebook.in/get_count_from_signpostphonebookdata.php",
        dataCount,
        {
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
        }
      );

      const responseData = response.data;

      // Handle response
      if (responseData.success) {
        console.log(
          `Success: ${responseData.message}, New Count: ${responseData.newCount}`
        );
        console.log(responseData.message);
      } else {
        console.log(`Error: ${responseData.message}`);
        console.log(responseData.message);
      }
    } catch (error) {
      console.log(`Error: Unable to reach the server. ${error.message}`);
      console.log(error.message);
    }
  };

  const insertbusinessName = async () => {
    const dataName = {
      name: userData.businessname || userData.person,
      date: new Date().toISOString().split("T")[0],
      dataentry_name: mybusinessname || myperson,
    };

    try {
      const response = await axios.post(
        "https://signpostphonebook.in/signpostphonebookdataentry_get_names.php",
        dataName,
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data.success) {
        console.log("Success", response.message);
      } else {
        console.log(response.message);
      }
    } catch (error) {
      console.log("unable to reach server", error);
    }
  };






  const insertRecord = async (e) => {
    e.preventDefault();

    if (!mymobileno) {
      alert("Please enter all required fields.");
      return;
    }

    if (isRegistered) {
      alert("Mobile number is already registered.");
      return;
    }
    const Data = {
      businessname: mybusinessname,
      prefix: cmpanyPrefix,
      person: myperson,
      personprefix: myprefix,
      address: myaddress,
      priority: mypriority,
      city: mycity,
      pincode: mypincode,
      mobileno: mymobileno,
      email: myemail,
      product: myproduct,
      landline: mylandLine,
      lcode: myLcode,
      discount: mydiscount,
      description: mydescription,
    };

    try {
      const response = await fetch(
        "https://signpostphonebook.in/client_insert_data_for_new_database.php",
        {
          method: "POST",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
          body: JSON.stringify(Data),
        }
      );

      const jsonResponse = await response.json();

      if (jsonResponse.Message) {
        setShowPopup(true);
        await insertCount(), insertbusinessName();
      } else {
        alert("Unexpected response from server.");
      }
    } catch (error) {
      alert("Error saving data.");
      console.log(error);
    }
  };

  const handleMobileHelptext = () => {
    setshowMobiletext(true);
    setShowPersonName(false);
    setShowPrefixText(false);
    setshowAddressText(false);
    setShowBusinesstext(false);
    setshowCityText(false);
    setshowPincodeText(false);
    setshowProductText(false);
    setshowLandlineText(false);
    setshowStdText(false);
    setshowEmailText(false);
  };

  const handleBusinessHelptext = () => {
    setShowBusinesstext(true);
    setshowMobiletext(false);
    setShowPersonName(false);
    setShowPrefixText(false);
    setshowAddressText(false);
    setshowCityText(false);
    setshowPincodeText(false);
    setshowProductText(false);
    setshowLandlineText(false);
    setshowStdText(false);
    setshowEmailText(false);
  };
  const handlePersonHelptext = () => {
    checkMobileNumber(mymobileno);
    setShowPersonName(true);
    setShowBusinesstext(false);
    setshowMobiletext(false);
    setShowPrefixText(false);
    setshowAddressText(false);
    setshowCityText(false);
    setshowPincodeText(false);
    setshowProductText(false);
    setshowLandlineText(false);
    setshowStdText(false);
    setshowEmailText(false);
  };
  const handleRadio = () => {
    setShowPersonName(false);
    setShowBusinesstext(false);
    setshowMobiletext(false);
    setShowPrefixText(true);
    setshowAddressText(false);
    setshowCityText(false);
    setshowPincodeText(false);
    setshowProductText(false);
    setshowLandlineText(false);
    setshowStdText(false);
    setshowEmailText(false);
  };
  const handleAddress = () => {
    setshowAddressText(true);
    setShowPersonName(false);
    setShowBusinesstext(false);
    setshowMobiletext(false);
    setShowPrefixText(false);
    setshowCityText(false);
    setshowPincodeText(false);
    setshowProductText(false);
    setshowLandlineText(false);
    setshowStdText(false);
    setshowEmailText(false);
  };
  const handleCity = () => {
    setshowAddressText(false);
    setShowPersonName(false);
    setShowBusinesstext(false);
    setshowMobiletext(false);
    setShowPrefixText(false);
    setshowCityText(true);
    setshowPincodeText(false);
    setshowProductText(false);
    setshowLandlineText(false);
    setshowStdText(false);
    setshowEmailText(false);
  };
  const handlePincode = () => {
    setshowAddressText(false);
    setShowPersonName(false);
    setShowBusinesstext(false);
    setshowMobiletext(false);
    setShowPrefixText(false);
    setshowCityText(false);
    setshowPincodeText(true);
    setshowProductText(false);
    setshowLandlineText(false);
    setshowStdText(false);
    setshowEmailText(false);
  };
  const handleProduct = () => {
    setshowAddressText(false);
    setShowPersonName(false);
    setShowBusinesstext(false);
    setshowMobiletext(false);
    setShowPrefixText(false);
    setshowCityText(false);
    setshowPincodeText(false);
    setshowProductText(true);
    setshowLandlineText(false);
    setshowStdText(false);
    setshowEmailText(false);
  };
  const handleLandLine = () => {
    setshowAddressText(false);
    setShowPersonName(false);
    setShowBusinesstext(false);
    setshowMobiletext(false);
    setShowPrefixText(false);
    setshowCityText(false);
    setshowPincodeText(false);
    setshowProductText(false);
    setshowLandlineText(true);
    setshowStdText(false);
    setshowEmailText(false);
  };
  const handleStdCode = () => {
    setshowAddressText(false);
    setShowPersonName(false);
    setShowBusinesstext(false);
    setshowMobiletext(false);
    setShowPrefixText(false);
    setshowCityText(false);
    setshowPincodeText(false);
    setshowProductText(false);
    setshowLandlineText(false);
    setshowStdText(true);
    setshowEmailText(false);
  };
  const handleEmail = () => {
    setshowAddressText(false);
    setShowPersonName(false);
    setShowBusinesstext(false);
    setshowMobiletext(false);
    setShowPrefixText(false);
    setshowCityText(false);
    setshowPincodeText(false);
    setshowProductText(false);
    setshowLandlineText(false);
    setshowStdText(false);
    setshowEmailText(true);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.headerText}>Media Partner</Text>
      <View style={styles.formContainer}>
        <ScrollView>
          <Text style={styles.label}>*Mobile Number :</Text>
          <TextInput
            style={styles.input}
            placeholder="Enter Mobile Number"
            keyboardType="number-pad"
            maxLength={10}
            value={mymobileno}  
            onFocus={handleMobileHelptext}
            onChangeText={(text) => setMobileno(text)}  
            onBlur={() => checkMobileNumber(mymobileno)}
          />
          {showMobiletext && (
            <Text style={styles.helpText}>
              Type 10 digits with country code (+91), without gaps. Don't enter
              a landline number.
            </Text>
          )}

          <Text style={styles.label}>Person Name:</Text>
          <TextInput
            style={styles.input}
            placeholder="Enter Name"
            value={myperson}
            onClick={handlePersonHelptext}
            onFocus={handlePersonHelptext}
            onChangeText={(text) => setPerson(text)}
          />
          {showPersonName && (
            <Text style={styles.helpText}>Type Initial at the end</Text>
          )}

          <View style={styles.prefixcontainer}>
            <Text style={styles.label}>*Prefix:</Text>
            <RadioButton.Group
              onValueChange={(value) => setPrefix(value)}
              value={myprefix}
            >
              <View style={styles.radioContainer}>
                <View style={styles.radioOption}>
                  <RadioButton value="Mr." />
                  <Text>Mr.</Text>
                </View>
                <View style={styles.radioOption}>
                  <RadioButton value="Ms." />
                  <Text>Ms.</Text>
                </View>
              </View>
            </RadioButton.Group>
            {showprefixtext && (
              <Text style={styles.helpText}>
                Select Mr. For Gents and Ms. for Ladies
              </Text>
            )}
          </View>

          <Text style={styles.label}>*Firm/ Business Name :</Text>
          <TextInput
            placeholder="Name/Business Name"
            style={styles.input}
            value={mybusinessname}
            onClick={handleBusinessHelptext}
            onChangeText={(text) => setBusinessname(text)}
          />

          <Text style={styles.label}>*Address :</Text>
          <TextInput
            placeholder="Address"
            style={[styles.input, { height: 80 }]}
            multiline
            value={myaddress}
            onChangeText={(text) => setAddress(text)}
          />

          <Text style={styles.label}>*City :</Text>
          <TextInput
            placeholder="City"
            style={styles.input}
            value={mycity}
            onChangeText={(text) => setCity(text)}
          />

          <Text style={styles.label}>*Pincode :</Text>
          <TextInput
            placeholder="Pincode"
            keyboardType="number-pad"
            maxLength={6}
            style={styles.input}
            value={mypincode}
            onChangeText={(text) => setPincode(text)}
          />

          <Text style={styles.label}>*Product / Service :</Text>
          <TextInput
            placeholder="Product"
            style={styles.input}
            value={myproduct}
            onChangeText={(text) => setProduct(text)}
          />

          <Text style={styles.label}>Landline No :</Text>
          <TextInput
            placeholder="Landline Number"
            keyboardType="number-pad"
            style={styles.input}
            value={mylandLine}
            onChangeText={(text) => setLandLine(text)}
          />

          <Text style={styles.label}>STD Code :</Text>
          <TextInput
            placeholder="STD Code"
            keyboardType="number-pad"
            style={styles.input}
            value={myLcode}
            onChangeText={(text) => setLcode(text)}
          />

          <Text style={styles.label}>Email :</Text>
          <TextInput
            style={styles.input}
            placeholder="example@mail.com"
            keyboardType="email-address"
            value={myemail}
            onChangeText={(text) => setEmail(text)}
            autoCapitalize="none"
          />

          <TouchableOpacity style={styles.button} onPress={insertRecord}>
            <Text style={styles.buttonText}>Submit</Text>
          </TouchableOpacity>
        </ScrollView>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#ffffff",
  },
  inputAndroid: {
    borderWidth: 3,
    borderColor: "#000000",
  },
  headerText: {
    textAlign: "center",
    fontSize: 50,
    fontWeight: "500",
    color: "#6a0dad",
  },
  formContainer: {
    flex: 1,
    backgroundColor: "#ffffff",
    borderTopLeftRadius: 300,
    padding: 20,
  },
  prefixcontainer: {
    padding: 16,
  },
  radioOption: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 8,
  },
  radioContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  label: {
    fontSize: 18,
    marginBottom: 10,
    fontWeight: "700",
  },
  input: {
    borderWidth: 1,
    borderColor: "#000000",
    borderRadius: 5,
    marginVertical: 8,
    paddingHorizontal: 10,
    height: 50,
  },
  button: {
    backgroundColor: "#6a0dad",
    borderRadius: 5,
    paddingVertical: 15,
    alignItems: "center",
    marginTop: 10,
  },
  buttonText: {
    color: "white",
    fontSize: 18,
    fontWeight: "bold",
  },
});

export default MediaPartner;













































orignal code











































const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: "#f9f9f9", // Light background for better contrast
    flex: 1,
  },
  title: {
    fontSize: 22,
    fontWeight: "bold",
    marginBottom: 10,
    color: "#333", // Darker text for better readability
 
  },
  description: {
    fontSize: 14,
    color: "#555",
    marginBottom: 15,
    lineHeight: 20, // Better text spacing
 
  },
  label: {
    fontSize: 16,
    fontWeight: "bold",
    marginTop: 15,
    color: "#444",
    display: "flex",
    flexDirection: "row",
  },
  textInput: {
    borderWidth: 1,
    borderColor: "#ccc",
    padding: 12,
    borderRadius: 8,
    marginBottom: 10,
    backgroundColor: "#fff",
    fontSize: 16,
  },
  radioButtonContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginVertical: 5,
  },
  button: {
    backgroundColor: "#007bff", // Brighter blue for better visibility
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: "center",
    marginVertical: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
    elevation: 3, // Shadow effect for Android
  },
  buttonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "600",
  },
  sendButton: {
    backgroundColor: "#28a745", // Green for success actions
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: "center",
    marginTop: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
    elevation: 3,
  },
  checkboxContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginVertical: 5,
  },
  checkboxText: {
    marginLeft: 8,
    fontSize: 16,
    color: "#333",
  },
});





































































































































import React, { useState, useEffect, useContext, useCallback } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  ScrollView,
  Alert,
  Linking,
  FlatList,
  ActivityIndicator,
  StyleSheet,
} from "react-native";
import axios from "axios";
import { AuthContext } from "./AuthContext";

const SendSms = () => {
  const { user, userData } = useContext(AuthContext);
  // const [userData, setUserData] = useState("");
  const [pincodeInput, setPincodeInput] = useState("");
  const [selectAll, setSelectAll] = useState(false);
  const [clrBtn, setClrBtn] = useState(false);
  const [datas, setData] = useState([]);
  const [showresults, setShowresults] = useState(false);
  const [noRecord, setNoRecord] = useState(false);
  const [selectedBusinesses, setSelectedBusinesses] = useState([]);
  const [selectedPrefix, setSelectedPrefix] = useState(null);
  const maxLength = 290;
  const batchSize = 10;
  const selectedNumbers = selectedBusinesses.slice(0, batchSize).map((client) => client.mobileno);
  const [customMessage, setCustomMessage] = useState(
    "I Saw Your Listing in SIGNPOST PHONE BOOK. I am Interested in your Products. Please Send Details/Call Me. (Sent Thro Signpost PHONE BOOK)"
  );

  const [prefix, setPrefix] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSelectAllChange = () => {
    if (selectAll) {
      setSelectedBusinesses([]);
    } else {
      setSelectedBusinesses([...datas]); // Use the reference directly
    }
    setSelectAll(!selectAll);
  };
  
  

  const fetchData = async () => {
    try {
      const response = await fetch(
        "https://signpostphonebook.in/client_fetch_for_new_database.php"
      );
      if (!response.ok)
        throw new Error(`HTTP Error! Status: ${response.status}`);
      const jsonResponse = await response.json();
      if (Array.isArray(jsonResponse)) {
        setData(jsonResponse.sort((a, b) => b.id - a.id));
      } else {
        Alert.alert("Unexpected response from server.");
      }
    } catch (error) {
      Alert.alert("Failed to load data: " + error.message);
    }
  };

  useEffect(() => {
    if (!pincodeInput && !prefix) {
      fetchData(); // Fetch all data only if no filters are applied
    }
  }, [pincodeInput, prefix]);
  

  const fetchBusinesses = () => {
    if (!pincodeInput || !prefix) {
      Alert.alert("Please enter a valid pincode and select a prefix.");
      return;
    }
  
    setLoading(true);
    axios
      .get(
        `https://signpostphonebook.in/get_details_based_on_prefix_pincode.php?pincode=${pincodeInput}&prefix=${prefix}`
      )
      .then((response) => {
        if (response.data?.[0] === "No records found.") {
          setNoRecord(true);
          setClrBtn(true);
          setData([]);
          setShowresults(false);
        } else {
          setData(response.data); // Keep only filtered data
          setClrBtn(true);
          setShowresults(true);
        }
      })
      .catch((error) => console.error("Error fetching businesses:", error))
      .finally(() => setLoading(false));
  };
  

  const handleCheckboxChange = useCallback((item) => {
    setSelectedBusinesses((prevSelected) => {
      const isSelected = prevSelected.some((i) => i.id === item.id);
      return isSelected
        ? prevSelected.filter((i) => i.id !== item.id) // Remove if selected
        : [...prevSelected, item]; // Add if not selected
    });
  }, []);
  

  const clearItems = () => {
    setPincodeInput("");
    setPrefix("");
    setSelectedPrefix(null);
    setData([]); // Clear data instead of reloading all records
    setSelectAll(false);
    setSelectedBusinesses([]);
    setClrBtn(false);
    setShowresults(false);
    setNoRecord(false);
  };
  
  

  const sendBatchSMS = () => {
    if (selectedBusinesses.length === 0) {
      Alert.alert("No clients selected!");
      return;
    }

    const currentDate = new Date().toISOString().split("T")[0];

    const postData = {
      user_name: userData.bussinessname || userData.person || "Unknown",
      date: currentDate,
      pincode: pincodeInput.trim(),
      product: "",
      promotion_from: "Nearby Promotion",
      selected_count: selectedBusinesses.length,
    };

    axios
      .post(
        "https://signpostphonebook.in/promotion_app/promotion_appliaction.php",
        postData
      )
      .then((response) => {
        console.log(response.data.Message);
      })
      .catch((error) => console.error("Error sending data:", error));

    const selectedNumbers = selectedBusinesses.map((client) => client.mobileno);
    const recipients = selectedNumbers.join(",");
    const smsUri = `sms:${recipients}?body=${encodeURIComponent(
      customMessage
    )}`;

    // Open SMS app
    Linking.openURL(smsUri).then(() => {
      // Clear all after sending
      setPincodeInput("");
      setPrefix("");
      setSelectedPrefix(null);
      setSelectedBusinesses([]);
      setSelectAll(false);
      setCustomMessage(
        "I Saw Your Listing in SIGNPOST PHONE BOOK. I am Interested in your Products. Please Send Details/Call Me. (Sent Thro Signpost PHONE BOOK)"
      );
      setClrBtn(false);
      setShowresults(false);
      setNoRecord(false);
    });
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.header}>NEARBY PROMOTION</Text>
      <Text style={styles.instructions}>
        Send Text messages to Mobile Users in desired Pincode Area.{"\n"}
        1. Edit/Create message. Max: 290 characters.{"\n"}
        2. Select type of Recipient (Males/Females/Business).{"\n"}
        3. Type Pincode.{"\n"}
        4. Send in batches of 10.
      </Text>

      <Text style={styles.label}>Edit / Create Message:</Text>
      <TextInput
        style={styles.textInput}
        multiline
        value={customMessage}
        onChangeText={setCustomMessage}
        maxLength={maxLength}
      />
      <Text>
        {maxLength - customMessage.length} / {maxLength}
      </Text>

      <Text style={styles.label}>Select Recipients Type:</Text>
      <View style={styles.recipientContainer}>
        {["Mr.", "Ms.", "M/s."].map((item) => (
          <TouchableOpacity key={item} onPress={() => setPrefix(item)}>
            <Text style={styles.radioText}>
              {prefix === item ? "🔘" : "⚪"} {item}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      <Text style={styles.label}>Select All Recipients:</Text>
      <TouchableOpacity onPress={handleSelectAllChange}>
        <Text style={styles.radioText}>
          {selectAll ? "🔘" : "⚪"} Select All
        </Text>
      </TouchableOpacity>

      <TouchableOpacity onPress={sendBatchSMS} style={styles.sendButton}>
        <Text style={styles.buttonText}>Send SMS</Text>
      </TouchableOpacity>

      <Text style={styles.label}>Enter Pincode:</Text>
      <TextInput
        style={styles.pincodeInput}
        keyboardType="numeric"
        maxLength={6}
        value={pincodeInput}
        onChangeText={setPincodeInput}
      />

      <TouchableOpacity
        onPress={clrBtn ? clearItems : fetchBusinesses}
        style={styles.searchButton}
      >
        <Text style={styles.buttonText}>{clrBtn ? "Clear" : "Search"}</Text>
      </TouchableOpacity>

      {showresults && (
        <View style={styles.resultContainer}>
          <Text style={styles.resultText}>
            <Text style={styles.boldText}>Results Displayed:</Text>{" "}
            {datas.length}
          </Text>
          <Text style={styles.resultText}>
            <Text style={styles.boldText}>Selected:</Text>{" "}
            {selectedBusinesses.length}
          </Text>
        </View>
      )}

      {loading && <ActivityIndicator size="large" color="blue" />}

      {showresults && datas?.length > 0 && (
        <ScrollView style={styles.resultList} nestedScrollEnabled={true}>
          {datas.map((item) => (
            <TouchableOpacity
              key={item.id}
              onPress={() => handleCheckboxChange(item)}
              style={[
                styles.resultItem,
                selectedBusinesses.includes(item) && styles.selectedItem,
              ]}
            >
              <Text
                style={[
                  styles.resultItemText,
                  selectedBusinesses.includes(item) && styles.selectedItemText,
                ]}
              >
                {selectedBusinesses.includes(item) ? "✔" : "○"}{" "}
                {item.businessname || item.person} -{" "}
                {item.mobileno.slice(0, -5)}xxxxx
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      )}

      <TouchableOpacity onPress={sendBatchSMS} style={styles.sendButton}>
        <Text style={styles.buttonText}>Send SMS</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
    height: "100%",
  },
  header: {
    fontSize: 30,
    fontWeight: "bold",
    marginBottom: 10,
    color: "#6a0dad",
    textAlign: "center",
  },
  instructions: {
    marginTop: 10,
    lineHeight: 30,
    fontSize: 16,
    textAlign: "justify",
  },
  label: {
    fontWeight: "bold",
    marginTop: 10,
    fontSize: 16,
  },
  textInput: {
    borderWidth: 1,
    padding: 15,
    borderRadius: 5,
    marginBottom: 10,
    fontSize: 16,
    lineHeight: 25,
  },
  recipientContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    gap: 15,
    marginTop: 10,
  },
  radioText:{
    fontSize: 16
  },
  sendButton: {
    backgroundColor: "green",
    padding: 10,
    borderRadius: 5,
    marginTop: 20,
  },
  searchButton:
  { backgroundColor: "blue",
    padding: 10,
    borderRadius: 5
  },
  buttonText:
  { color: "white",
    textAlign: "center"
  },
  pincodeInput: {
    borderWidth: 1,
    padding: 10,
    borderRadius: 5,
    marginBottom: 10,
  },
  resultContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingVertical: 10,
    paddingHorizontal: 15,
    backgroundColor: "#f0f0f0",
    borderRadius: 8,
    marginTop: 10,
  },
  resultText:
  { fontSize: 16,
    color: "#333"
  },
  boldText:{
    fontWeight: "bold"
  },
  resultList:{
    maxHeight: 300
  },
  resultItem: {
    backgroundColor: "#fff",
    padding: 12,
    marginVertical: 6,
    marginHorizontal: 10,
    borderRadius: 10,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowOffset: { width: 0, height: 2 },
    elevation: 3,
  },
  selectedItem:{
    backgroundColor: "#4CAF50"
  },
  resultItemText:
  { fontSize: 16,
    fontWeight: "bold",
    color: "#333"
  },
  selectedItemText:{
    color: "#fff"
  },

});

export default SendSms;

this is my code optimize in this 
✅ FlatList optimized using React.memo
✅ Prevent excessive re-renders using useCallback
✅ Reduced memory usage with windowSize and removeClippedSubviews
✅ Faster UI updates

Important Note : dont skip or leave any codes\
































































































































































import React, { useEffect, useState, useContext, useMemo } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  FlatList,
  Alert,
  Linking,
  StyleSheet,
} from "react-native";
import { AuthContext } from "./AuthContext";
import axios from "axios";

export default function ProductSms() {
  const { user } = useContext(AuthContext);
  const [allClients, setAllClients] = useState([]); // Store all data
  const [filteredClients, setFilteredClients] = useState([]); // Store searched data
  const [productInput, setProductInput] = useState("");
  const [selectedClients, setSelectedClients] = useState([]);
  const [selectAll, setSelectAll] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const maxLength = 290;
  const [customMessage, setCustomMessage] = useState(
    "I Saw Your Listing in SIGNPOST PHONE BOOK. I am Interested in your Products. Please Send Details/Call Me. (Sent Thro Signpost PHONE BOOK)"
  );

  useEffect(() => {
    fetchData();
  }, []);

  // Fetch all clients (only once)
  const fetchData = async () => {
    try {
      const response = await axios.get(
        "https://signpostphonebook.in/client_fetch.php"
      );
      if (Array.isArray(response.data)) {
        setAllClients(response.data.sort((a, b) => b.id - a.id));
      } else {
        Alert.alert("Error", "Unexpected response from server.");
      }
    } catch (error) {
      Alert.alert("Error", "Failed to load data: " + error.message);
    }
  };

  // Search for a product
  const handleSearch = () => {
    if (productInput.trim() === "") {
      Alert.alert("Search Error", "Please enter a product name.");
      return;
    }
    const filteredData = allClients.filter((client) =>
      client.product.toLowerCase().includes(productInput.toLowerCase())
    );
    setFilteredClients(filteredData);
    setShowResults(true);
    setSelectedClients([]); // Reset selection
  };

  // Clear search
  const handleClear = () => {
    setProductInput("");
    setFilteredClients([]);
    setShowResults(false);
    setSelectedClients([]);
    setSelectAll(false);
  };

  // Toggle individual selection
  const handleCheckboxChange = (client) => {
    setSelectedClients((prev) =>
      prev.includes(client)
        ? prev.filter((item) => item !== client)
        : [...prev, client]
    );
  };

  // Select all/deselect all
  const handleSelectAllChange = () => {
    if (selectAll) {
      setSelectedClients([]);
    } else {
      setSelectedClients(filteredClients);
    }
    setSelectAll(!selectAll);
  };

  // Send SMS to selected clients
  const sendSMS = () => {
    if (selectedClients.length === 0) {
      Alert.alert("No Clients Selected", "Please select at least one client.");
      return;
    }

    const mobileNumbers = selectedClients
      .map((client) => client.mobileno)
      .join(",");
    const smsUri = `sms:${mobileNumbers}?body=${encodeURIComponent(
      customMessage
    )}`;

    Linking.openURL(smsUri).catch(() =>
      Alert.alert("Error", "Failed to open SMS application.")
    );
  };

  return (
    <View style={styles.container}>
      {/* HEADER */}
      <Text style={styles.heading}>CATEGORYWISE PROMOTION</Text>
      <Text style={styles.description}>
        Send messages to mobile users dealing in a specific product.{"\n"}
        1. First edit / create message to be sent. Minimum 1 Count (145
        characters), Maximum 2 counts (290 characters){"\n"}
        2. Type specific Category / product / keyword{"\n"}
        3. For error-free delivery of messages, send in batches of 10 each
        time.
      </Text>

      {/* MESSAGE INPUT */}
      <Text style={styles.label}>Edit / Create Message:</Text>
      <TextInput
        style={styles.textarea}
        value={customMessage}
        onChangeText={setCustomMessage}
        multiline
        maxLength={maxLength}
      />
      <Text style={styles.charCount}>
        {maxLength - customMessage.length} / {maxLength}
      </Text>

      {/* SEARCH INPUT */}
      <Text style={styles.label}>Category:</Text>
      <TextInput
        style={styles.input}
        placeholder="Type product name..."
        value={productInput}
        onChangeText={setProductInput}
      />

      {/* SEARCH & CLEAR BUTTONS */}
      <View style={styles.buttonRow}>
        <TouchableOpacity style={styles.button} onPress={handleSearch}>
          <Text style={styles.buttonText}>Search</Text>
        </TouchableOpacity>
        {showResults && (
          <TouchableOpacity style={styles.clearButton} onPress={handleClear}>
            <Text style={styles.buttonText}>Clear</Text>
          </TouchableOpacity>
        )}
      </View>

      {/* DISPLAY SELECTION COUNT */}
      {showResults && (
        <View style={styles.countContainer}>
          <Text style={styles.totalCount}>Total Clients: {filteredClients.length}</Text>
          <Text style={styles.selectedCount}>Selected: {selectedClients.length}</Text>
        </View>
      )}

      {/* SELECT ALL CHECKBOX */}
      {showResults && (
        <View style={styles.checkboxRow}>
          <Text style={styles.checkboxLabel}>Select All</Text>
          <TouchableOpacity onPress={handleSelectAllChange}>
            <Text style={styles.checkbox}>{selectAll ? "☑" : "☐"}</Text>
          </TouchableOpacity>
        </View>
      )}

      {/* FLATLIST FOR RESULTS */}
      <FlatList
        data={filteredClients}
        keyExtractor={(item) => item.id.toString()}
        renderItem={({ item }) => (
          <View
            style={[
              styles.card,
              selectedClients.includes(item) && styles.selectedCard,
            ]}
          >
            <Text style={styles.cardTitle}>{item.businessname}</Text>
            <Text>{item.product}</Text>
            <View style={styles.checkboxRow}>
              <Text>{item.mobileno.slice(0, -5)}xxxxx</Text>
              <TouchableOpacity onPress={() => handleCheckboxChange(item)}>
                <Text style={styles.checkbox}>
                  {selectedClients.includes(item) ? "✔" : "○"}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        )}
      />

      {/* SEND SMS BUTTON */}
      {showResults && selectedClients.length > 0 && (
        <TouchableOpacity style={styles.button} onPress={sendSMS}>
          <Text style={styles.buttonText}>Send SMS</Text>
        </TouchableOpacity>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20 },
  heading: { fontSize: 18, fontWeight: "bold", textAlign: "center", marginBottom: 10 },
  description: { marginBottom: 10 },
  label: { fontSize: 16, fontWeight: "bold", marginTop: 10 },
  textarea: { borderWidth: 1, padding: 10, height: 100, borderRadius: 5 },
  input: { borderWidth: 1, padding: 10, marginVertical: 10, borderRadius: 5 },
  countContainer: { flexDirection: "row", justifyContent: "space-between", marginVertical: 10 },
  totalCount: { fontSize: 16, fontWeight: "bold", color: "blue" },
  selectedCount: { fontSize: 16, fontWeight: "bold", color: "green" },
});

